const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users'); // extract the model declared in models/User in this way

passport.serializeUser((user, done) => {
    done(null, user.id); // user.id is the id automatically generated by mongo
});

passport.deserializeUser((id, done) => {
    User.findById(id).then(user => {
        done(null, user);
    });
});

passport.use(
    new GoogleStrategy({
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback',
        proxy: true
        },
        async (accessToken, refreshToken, profile, done) => {
            // query to check if the user is already exists
            const existingUser = await User.findOne({ googleId: profile.id });
            // already have a record of the provided profile ID
            if (existingUser){
                return done(null, existingUser) // tell database we finish
            }
            const user = await new User({ googleId: profile.id }).save(); // save the model to the database
            done(null, user);
        }
    )
);